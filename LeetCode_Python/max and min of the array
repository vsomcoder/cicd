code:
-----
    class Main:
    def max_min(self, l: list[int]) -> dict:
        if not l:
            return {"min": None, "max": None}
        
        min_value = float('inf')  # Initialize with positive infinity
        max_value = float('-inf')  # Initialize with negative infinity

        for num in l:
            if num < min_value:
                min_value = num
            if num > max_value:
                max_value = num

        min_max = {"min": min_value, "max": max_value}
        return min_max
    # Create an instance of the class
    m = Main()

    # Get user input as a string
    user_input = input("Enter numbers separated by spaces: ")
    # Split the input string into individual elements
    input_list = user_input.split()
    # Convert the elements to integers
    integer_list = [int(item) for item in input_list]

    # Call the max_min method and capture the result
    result = m.max_min(integer_list)

    # Print the result
    print(result)

    This approach iterates through the list once, updating the minimum and maximum values as needed. 
    It has a linear time complexity of O(n) 
    space complexity is O(1)
